// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service_bus

import (
	"golang-rest-api-clean-architecture/pkg/entities"
	"sync"
)

// Ensure, that ServiceBusClientMock does implement ServiceBusClient.
// If this is not the case, regenerate this file with moq.
var _ ServiceBusClient = &ServiceBusClientMock{}

// ServiceBusClientMock is a mock implementation of ServiceBusClient.
//
// 	func TestSomethingThatUsesServiceBusClient(t *testing.T) {
//
// 		// make and configure a mocked ServiceBusClient
// 		mockedServiceBusClient := &ServiceBusClientMock{
// 			PublishFunc: func(company *entities.Company)  {
// 				panic("mock out the Publish method")
// 			},
// 		}
//
// 		// use mockedServiceBusClient in code that requires ServiceBusClient
// 		// and then make assertions.
//
// 	}
type ServiceBusClientMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(company *entities.Company)

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Company is the company argument value.
			Company *entities.Company
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *ServiceBusClientMock) Publish(company *entities.Company) {
	if mock.PublishFunc == nil {
		panic("ServiceBusClientMock.PublishFunc: method is nil but ServiceBusClient.Publish was just called")
	}
	callInfo := struct {
		Company *entities.Company
	}{
		Company: company,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	mock.PublishFunc(company)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//     len(mockedServiceBusClient.PublishCalls())
func (mock *ServiceBusClientMock) PublishCalls() []struct {
	Company *entities.Company
} {
	var calls []struct {
		Company *entities.Company
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
