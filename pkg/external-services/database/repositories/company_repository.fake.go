// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package repositories

import (
	"golang-rest-api-clean-architecture/pkg/entities"
	"sync"
)

// Ensure, that CompanyRepositoryMock does implement CompanyRepository.
// If this is not the case, regenerate this file with moq.
var _ CompanyRepository = &CompanyRepositoryMock{}

// CompanyRepositoryMock is a mock implementation of CompanyRepository.
//
// 	func TestSomethingThatUsesCompanyRepository(t *testing.T) {
//
// 		// make and configure a mocked CompanyRepository
// 		mockedCompanyRepository := &CompanyRepositoryMock{
// 			AddCompanyFunc: func(company *entities.Company) error {
// 				panic("mock out the AddCompany method")
// 			},
// 			GetCompaniesFunc: func() []entities.Company {
// 				panic("mock out the GetCompanies method")
// 			},
// 			GetCompanyByCodeFunc: func(code string) entities.Company {
// 				panic("mock out the GetCompanyByCode method")
// 			},
// 			GetCompanyByCountryFunc: func(phone string) entities.Company {
// 				panic("mock out the GetCompanyByCountry method")
// 			},
// 			GetCompanyByIdFunc: func(id int) entities.Company {
// 				panic("mock out the GetCompanyById method")
// 			},
// 			GetCompanyByNameFunc: func(name string) entities.Company {
// 				panic("mock out the GetCompanyByName method")
// 			},
// 			GetCompanyByPhoneFunc: func(phone string) entities.Company {
// 				panic("mock out the GetCompanyByPhone method")
// 			},
// 			GetCompanyByWebsiteFunc: func(website string) entities.Company {
// 				panic("mock out the GetCompanyByWebsite method")
// 			},
// 			GetLastAddedCompanyFunc: func() entities.Company {
// 				panic("mock out the GetLastAddedCompany method")
// 			},
// 			RemoveCompanyFunc: func(id int) error {
// 				panic("mock out the RemoveCompany method")
// 			},
// 		}
//
// 		// use mockedCompanyRepository in code that requires CompanyRepository
// 		// and then make assertions.
//
// 	}
type CompanyRepositoryMock struct {
	// AddCompanyFunc mocks the AddCompany method.
	AddCompanyFunc func(company *entities.Company) error

	// GetCompaniesFunc mocks the GetCompanies method.
	GetCompaniesFunc func() []entities.Company

	// GetCompanyByCodeFunc mocks the GetCompanyByCode method.
	GetCompanyByCodeFunc func(code string) entities.Company

	// GetCompanyByCountryFunc mocks the GetCompanyByCountry method.
	GetCompanyByCountryFunc func(phone string) entities.Company

	// GetCompanyByIdFunc mocks the GetCompanyById method.
	GetCompanyByIdFunc func(id int) entities.Company

	// GetCompanyByNameFunc mocks the GetCompanyByName method.
	GetCompanyByNameFunc func(name string) entities.Company

	// GetCompanyByPhoneFunc mocks the GetCompanyByPhone method.
	GetCompanyByPhoneFunc func(phone string) entities.Company

	// GetCompanyByWebsiteFunc mocks the GetCompanyByWebsite method.
	GetCompanyByWebsiteFunc func(website string) entities.Company

	// GetLastAddedCompanyFunc mocks the GetLastAddedCompany method.
	GetLastAddedCompanyFunc func() entities.Company

	// RemoveCompanyFunc mocks the RemoveCompany method.
	RemoveCompanyFunc func(id int) error

	// calls tracks calls to the methods.
	calls struct {
		// AddCompany holds details about calls to the AddCompany method.
		AddCompany []struct {
			// Company is the company argument value.
			Company *entities.Company
		}
		// GetCompanies holds details about calls to the GetCompanies method.
		GetCompanies []struct {
		}
		// GetCompanyByCode holds details about calls to the GetCompanyByCode method.
		GetCompanyByCode []struct {
			// Code is the code argument value.
			Code string
		}
		// GetCompanyByCountry holds details about calls to the GetCompanyByCountry method.
		GetCompanyByCountry []struct {
			// Phone is the phone argument value.
			Phone string
		}
		// GetCompanyById holds details about calls to the GetCompanyById method.
		GetCompanyById []struct {
			// ID is the id argument value.
			ID int
		}
		// GetCompanyByName holds details about calls to the GetCompanyByName method.
		GetCompanyByName []struct {
			// Name is the name argument value.
			Name string
		}
		// GetCompanyByPhone holds details about calls to the GetCompanyByPhone method.
		GetCompanyByPhone []struct {
			// Phone is the phone argument value.
			Phone string
		}
		// GetCompanyByWebsite holds details about calls to the GetCompanyByWebsite method.
		GetCompanyByWebsite []struct {
			// Website is the website argument value.
			Website string
		}
		// GetLastAddedCompany holds details about calls to the GetLastAddedCompany method.
		GetLastAddedCompany []struct {
		}
		// RemoveCompany holds details about calls to the RemoveCompany method.
		RemoveCompany []struct {
			// ID is the id argument value.
			ID int
		}
	}
	lockAddCompany          sync.RWMutex
	lockGetCompanies        sync.RWMutex
	lockGetCompanyByCode    sync.RWMutex
	lockGetCompanyByCountry sync.RWMutex
	lockGetCompanyById      sync.RWMutex
	lockGetCompanyByName    sync.RWMutex
	lockGetCompanyByPhone   sync.RWMutex
	lockGetCompanyByWebsite sync.RWMutex
	lockGetLastAddedCompany sync.RWMutex
	lockRemoveCompany       sync.RWMutex
}

// AddCompany calls AddCompanyFunc.
func (mock *CompanyRepositoryMock) AddCompany(company *entities.Company) error {
	if mock.AddCompanyFunc == nil {
		panic("CompanyRepositoryMock.AddCompanyFunc: method is nil but CompanyRepository.AddCompany was just called")
	}
	callInfo := struct {
		Company *entities.Company
	}{
		Company: company,
	}
	mock.lockAddCompany.Lock()
	mock.calls.AddCompany = append(mock.calls.AddCompany, callInfo)
	mock.lockAddCompany.Unlock()
	return mock.AddCompanyFunc(company)
}

// AddCompanyCalls gets all the calls that were made to AddCompany.
// Check the length with:
//     len(mockedCompanyRepository.AddCompanyCalls())
func (mock *CompanyRepositoryMock) AddCompanyCalls() []struct {
	Company *entities.Company
} {
	var calls []struct {
		Company *entities.Company
	}
	mock.lockAddCompany.RLock()
	calls = mock.calls.AddCompany
	mock.lockAddCompany.RUnlock()
	return calls
}

// GetCompanies calls GetCompaniesFunc.
func (mock *CompanyRepositoryMock) GetCompanies() []entities.Company {
	if mock.GetCompaniesFunc == nil {
		panic("CompanyRepositoryMock.GetCompaniesFunc: method is nil but CompanyRepository.GetCompanies was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetCompanies.Lock()
	mock.calls.GetCompanies = append(mock.calls.GetCompanies, callInfo)
	mock.lockGetCompanies.Unlock()
	return mock.GetCompaniesFunc()
}

// GetCompaniesCalls gets all the calls that were made to GetCompanies.
// Check the length with:
//     len(mockedCompanyRepository.GetCompaniesCalls())
func (mock *CompanyRepositoryMock) GetCompaniesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetCompanies.RLock()
	calls = mock.calls.GetCompanies
	mock.lockGetCompanies.RUnlock()
	return calls
}

// GetCompanyByCode calls GetCompanyByCodeFunc.
func (mock *CompanyRepositoryMock) GetCompanyByCode(code string) entities.Company {
	if mock.GetCompanyByCodeFunc == nil {
		panic("CompanyRepositoryMock.GetCompanyByCodeFunc: method is nil but CompanyRepository.GetCompanyByCode was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	mock.lockGetCompanyByCode.Lock()
	mock.calls.GetCompanyByCode = append(mock.calls.GetCompanyByCode, callInfo)
	mock.lockGetCompanyByCode.Unlock()
	return mock.GetCompanyByCodeFunc(code)
}

// GetCompanyByCodeCalls gets all the calls that were made to GetCompanyByCode.
// Check the length with:
//     len(mockedCompanyRepository.GetCompanyByCodeCalls())
func (mock *CompanyRepositoryMock) GetCompanyByCodeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	mock.lockGetCompanyByCode.RLock()
	calls = mock.calls.GetCompanyByCode
	mock.lockGetCompanyByCode.RUnlock()
	return calls
}

// GetCompanyByCountry calls GetCompanyByCountryFunc.
func (mock *CompanyRepositoryMock) GetCompanyByCountry(phone string) entities.Company {
	if mock.GetCompanyByCountryFunc == nil {
		panic("CompanyRepositoryMock.GetCompanyByCountryFunc: method is nil but CompanyRepository.GetCompanyByCountry was just called")
	}
	callInfo := struct {
		Phone string
	}{
		Phone: phone,
	}
	mock.lockGetCompanyByCountry.Lock()
	mock.calls.GetCompanyByCountry = append(mock.calls.GetCompanyByCountry, callInfo)
	mock.lockGetCompanyByCountry.Unlock()
	return mock.GetCompanyByCountryFunc(phone)
}

// GetCompanyByCountryCalls gets all the calls that were made to GetCompanyByCountry.
// Check the length with:
//     len(mockedCompanyRepository.GetCompanyByCountryCalls())
func (mock *CompanyRepositoryMock) GetCompanyByCountryCalls() []struct {
	Phone string
} {
	var calls []struct {
		Phone string
	}
	mock.lockGetCompanyByCountry.RLock()
	calls = mock.calls.GetCompanyByCountry
	mock.lockGetCompanyByCountry.RUnlock()
	return calls
}

// GetCompanyById calls GetCompanyByIdFunc.
func (mock *CompanyRepositoryMock) GetCompanyById(id int) entities.Company {
	if mock.GetCompanyByIdFunc == nil {
		panic("CompanyRepositoryMock.GetCompanyByIdFunc: method is nil but CompanyRepository.GetCompanyById was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGetCompanyById.Lock()
	mock.calls.GetCompanyById = append(mock.calls.GetCompanyById, callInfo)
	mock.lockGetCompanyById.Unlock()
	return mock.GetCompanyByIdFunc(id)
}

// GetCompanyByIdCalls gets all the calls that were made to GetCompanyById.
// Check the length with:
//     len(mockedCompanyRepository.GetCompanyByIdCalls())
func (mock *CompanyRepositoryMock) GetCompanyByIdCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGetCompanyById.RLock()
	calls = mock.calls.GetCompanyById
	mock.lockGetCompanyById.RUnlock()
	return calls
}

// GetCompanyByName calls GetCompanyByNameFunc.
func (mock *CompanyRepositoryMock) GetCompanyByName(name string) entities.Company {
	if mock.GetCompanyByNameFunc == nil {
		panic("CompanyRepositoryMock.GetCompanyByNameFunc: method is nil but CompanyRepository.GetCompanyByName was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetCompanyByName.Lock()
	mock.calls.GetCompanyByName = append(mock.calls.GetCompanyByName, callInfo)
	mock.lockGetCompanyByName.Unlock()
	return mock.GetCompanyByNameFunc(name)
}

// GetCompanyByNameCalls gets all the calls that were made to GetCompanyByName.
// Check the length with:
//     len(mockedCompanyRepository.GetCompanyByNameCalls())
func (mock *CompanyRepositoryMock) GetCompanyByNameCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetCompanyByName.RLock()
	calls = mock.calls.GetCompanyByName
	mock.lockGetCompanyByName.RUnlock()
	return calls
}

// GetCompanyByPhone calls GetCompanyByPhoneFunc.
func (mock *CompanyRepositoryMock) GetCompanyByPhone(phone string) entities.Company {
	if mock.GetCompanyByPhoneFunc == nil {
		panic("CompanyRepositoryMock.GetCompanyByPhoneFunc: method is nil but CompanyRepository.GetCompanyByPhone was just called")
	}
	callInfo := struct {
		Phone string
	}{
		Phone: phone,
	}
	mock.lockGetCompanyByPhone.Lock()
	mock.calls.GetCompanyByPhone = append(mock.calls.GetCompanyByPhone, callInfo)
	mock.lockGetCompanyByPhone.Unlock()
	return mock.GetCompanyByPhoneFunc(phone)
}

// GetCompanyByPhoneCalls gets all the calls that were made to GetCompanyByPhone.
// Check the length with:
//     len(mockedCompanyRepository.GetCompanyByPhoneCalls())
func (mock *CompanyRepositoryMock) GetCompanyByPhoneCalls() []struct {
	Phone string
} {
	var calls []struct {
		Phone string
	}
	mock.lockGetCompanyByPhone.RLock()
	calls = mock.calls.GetCompanyByPhone
	mock.lockGetCompanyByPhone.RUnlock()
	return calls
}

// GetCompanyByWebsite calls GetCompanyByWebsiteFunc.
func (mock *CompanyRepositoryMock) GetCompanyByWebsite(website string) entities.Company {
	if mock.GetCompanyByWebsiteFunc == nil {
		panic("CompanyRepositoryMock.GetCompanyByWebsiteFunc: method is nil but CompanyRepository.GetCompanyByWebsite was just called")
	}
	callInfo := struct {
		Website string
	}{
		Website: website,
	}
	mock.lockGetCompanyByWebsite.Lock()
	mock.calls.GetCompanyByWebsite = append(mock.calls.GetCompanyByWebsite, callInfo)
	mock.lockGetCompanyByWebsite.Unlock()
	return mock.GetCompanyByWebsiteFunc(website)
}

// GetCompanyByWebsiteCalls gets all the calls that were made to GetCompanyByWebsite.
// Check the length with:
//     len(mockedCompanyRepository.GetCompanyByWebsiteCalls())
func (mock *CompanyRepositoryMock) GetCompanyByWebsiteCalls() []struct {
	Website string
} {
	var calls []struct {
		Website string
	}
	mock.lockGetCompanyByWebsite.RLock()
	calls = mock.calls.GetCompanyByWebsite
	mock.lockGetCompanyByWebsite.RUnlock()
	return calls
}

// GetLastAddedCompany calls GetLastAddedCompanyFunc.
func (mock *CompanyRepositoryMock) GetLastAddedCompany() entities.Company {
	if mock.GetLastAddedCompanyFunc == nil {
		panic("CompanyRepositoryMock.GetLastAddedCompanyFunc: method is nil but CompanyRepository.GetLastAddedCompany was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetLastAddedCompany.Lock()
	mock.calls.GetLastAddedCompany = append(mock.calls.GetLastAddedCompany, callInfo)
	mock.lockGetLastAddedCompany.Unlock()
	return mock.GetLastAddedCompanyFunc()
}

// GetLastAddedCompanyCalls gets all the calls that were made to GetLastAddedCompany.
// Check the length with:
//     len(mockedCompanyRepository.GetLastAddedCompanyCalls())
func (mock *CompanyRepositoryMock) GetLastAddedCompanyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetLastAddedCompany.RLock()
	calls = mock.calls.GetLastAddedCompany
	mock.lockGetLastAddedCompany.RUnlock()
	return calls
}

// RemoveCompany calls RemoveCompanyFunc.
func (mock *CompanyRepositoryMock) RemoveCompany(id int) error {
	if mock.RemoveCompanyFunc == nil {
		panic("CompanyRepositoryMock.RemoveCompanyFunc: method is nil but CompanyRepository.RemoveCompany was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockRemoveCompany.Lock()
	mock.calls.RemoveCompany = append(mock.calls.RemoveCompany, callInfo)
	mock.lockRemoveCompany.Unlock()
	return mock.RemoveCompanyFunc(id)
}

// RemoveCompanyCalls gets all the calls that were made to RemoveCompany.
// Check the length with:
//     len(mockedCompanyRepository.RemoveCompanyCalls())
func (mock *CompanyRepositoryMock) RemoveCompanyCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockRemoveCompany.RLock()
	calls = mock.calls.RemoveCompany
	mock.lockRemoveCompany.RUnlock()
	return calls
}
