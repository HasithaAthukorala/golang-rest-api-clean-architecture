// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package location_verifier

import (
	"sync"
)

// Ensure, that LocationVerificationClientMock does implement LocationVerificationClient.
// If this is not the case, regenerate this file with moq.
var _ LocationVerificationClient = &LocationVerificationClientMock{}

// LocationVerificationClientMock is a mock implementation of LocationVerificationClient.
//
// 	func TestSomethingThatUsesLocationVerificationClient(t *testing.T) {
//
// 		// make and configure a mocked LocationVerificationClient
// 		mockedLocationVerificationClient := &LocationVerificationClientMock{
// 			VerifyFunc: func(ipAddress string) (bool, error) {
// 				panic("mock out the Verify method")
// 			},
// 		}
//
// 		// use mockedLocationVerificationClient in code that requires LocationVerificationClient
// 		// and then make assertions.
//
// 	}
type LocationVerificationClientMock struct {
	// VerifyFunc mocks the Verify method.
	VerifyFunc func(ipAddress string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Verify holds details about calls to the Verify method.
		Verify []struct {
			// IpAddress is the ipAddress argument value.
			IpAddress string
		}
	}
	lockVerify sync.RWMutex
}

// Verify calls VerifyFunc.
func (mock *LocationVerificationClientMock) Verify(ipAddress string) (bool, error) {
	if mock.VerifyFunc == nil {
		panic("LocationVerificationClientMock.VerifyFunc: method is nil but LocationVerificationClient.Verify was just called")
	}
	callInfo := struct {
		IpAddress string
	}{
		IpAddress: ipAddress,
	}
	mock.lockVerify.Lock()
	mock.calls.Verify = append(mock.calls.Verify, callInfo)
	mock.lockVerify.Unlock()
	return mock.VerifyFunc(ipAddress)
}

// VerifyCalls gets all the calls that were made to Verify.
// Check the length with:
//     len(mockedLocationVerificationClient.VerifyCalls())
func (mock *LocationVerificationClientMock) VerifyCalls() []struct {
	IpAddress string
} {
	var calls []struct {
		IpAddress string
	}
	mock.lockVerify.RLock()
	calls = mock.calls.Verify
	mock.lockVerify.RUnlock()
	return calls
}
